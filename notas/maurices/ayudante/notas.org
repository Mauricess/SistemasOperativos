* Notas ayudante
** Primera

- Interfaz con usuarios
- Proveedor de servicios (Interfaz de llamadas al sistema)
- Administrador de recursos
- Abstracción de hardware (máquina virtual)

*** Conceptos

- Kernel
- Procesos
- Memoria
- Espacios de usuario
- Subsistemas
** Segunda
*** Definiciones
- Kernel
- Procesos de sistema
- Controladores de dispositivo / manejadores de dispositivos
- Llamadas al sistema
- Interrupciones
- Vector de interrupciones
_____________________________________
|______________Usuario______________|
  |         Aplicaciones          |
    | API| Procesos del sistema |
        | Kernel | (Núcleo) |   
           |  Hardware  |  
** Tercera
*** Controladores
 _______     _______     _______     _______
|__Mem__|   |__USB__|   |_PCI I_|   |__CPU__|
 Cntrld      Cntrld         |           |
|  |            |           |           |
|  --------------------------------------
|                    | 
Firmware  _________________________ 
         |_Controlador de memoria__|
	 |________Memoria_________ |

Todos los dispositivos tienen un controlador, este se conecta con la memoria; en especifico con el controlador de la memoria.
 _______
|__Mem__|
    |    \ DMA
    |     \  _______________
    |       |__Dispositivo__|
 ___|____ /
|__CPU__|/

Los dispositivos ya pueden escribir directo a la memoria. Esta tecnología se llama DMA (Direct Access Memory)

*** Interrupciones

Interrupción.
Existen de dos tipos.
- HW
- Software

Al iniciar el sistema operativo se inicia el BIOS o UEFI.
En el caso del BIOS se inicia el vector de interrupciones
 - Direcciones bajas (cerca del cero)
 - Tabla de llamadas al sistema

 ____          ________
|BIOS|  ----> |_Kernel_|
|UEFI|  Jump Inicio Kernel


init es el primer proceso que inicia, tiene el número 0. Todos los procesos son hijos de este 

- Llamada al sistema (syscall)
Las llamadas al sistema deben estar definidas en la memoria.

*** Procesos
  _____________________
 | _Espacio de usuario_|
 |     |API Syscall|   |
 |  Sistema Operativo  |
 |     __________      |
 |____|__Kernel__|_____|
 
** Cuarta
*** Servicios

Estos son los servicios elementales que debe ofrecer cualquier SO:

1. Administración de Memoria
2. Calanderización de CPU
3. Operaciones de entrada y salida
  
*** Manejador de dispositivo

 +------------+
| Usuarios   |
 +------------+
|Prg.Usuarios|
 +------------+
|Bibliotecas |
 +------------+
| Syscalls   |
 +------------+
|Serv. Elemnt|
 +------------------+
|Kernel(Manejador) |
 +------------------+
|Controladores|
 +-------------+
|  Hardware   |
 +-------------+
 +---+
|CPU|  (Device Driver)
 +---+    Manejador de dispositivo
  ^   
  |   Traducir idioma kernel a idioma controlador
  v  
 +-------------------+
| MCU | Controlador | -> Controlador  
 +-------------------+
      |      HD     |   Expone API
       +-------------+    Habla con HW

*** Tipos de estructura de Kernel

1. Monolítico
2. Modular
3. Microkernel
4. Híbrido
** Quinta
*** Tipos de estructura de Kernel

1. Monolítico
 +-------------------+
|Espacio de usuario |
 +-------------------+
        |
 +-------------------+
|  Kernel (S.O.)    |
 +-------------------+
        |
 +-------------------+
|       HW          |
 +-------------------+
2. Modular
El codigo de los modulos se ejecutan en modo privilegiado.
3. Microkernel
El codigo de los modulos se ejecutan en modo normal.
  +-----------------+
 |Syscal | Biblio  | (Modulos)
  +-----------------+
     |         |
  +-------------------+
 |  (Micro Kernel)   |
 |Calendarizador     |
 |  Admin Memoria    |
 |   Admin Procesos  |
  +-------------------+
         |
  +-------------------+
 |        HW         |
  +-------------------+
4. Híbrido
*** Diseño por capas

Cada capa va a contar con una interfaz, consumiendo con los servicios de las capa inferior.

                   +-------------------------+
                   |   Espacio usuario       |
                   +-------------------------+
                   |Interfaz llamadas sistema|
                   +-------------------------+
                   |Scheduler |Admin. Memoria|
                   +-------------------------+
                   |Manejador de Dispositivos|
                   +-------------------------+
                        |     HW     |
                        +------------+
Multics fue un SO militar. Se creo Unics apartir de esta, evolucionando en Unix.

*** Temas de examen
1. ¿Qué es un sistema operativo?
2. ¿Cuál es la finalidad de un S.O.?
3. Diferencias entre:
   - (CPU) Modo usuario y modo privilegiado
Conjunto de instrucciones, tamaño de los registros.
   - Manejador y controlador
4. ¿Cuál es el proceso de arranque de una computadora?
5. ¿Qué es un kernel?
- Es la abstracción del hardware.
6. ¿Qué es una llamada al sistema?
7. ¿Qué es una interrupción?
   - De HW
   - De SW
8. ¿Qué tipos de estructura de kernel existen?
** Sexta
*** Proceso
1. Código (sección texto)
2. Contador de programa
3. Valores temporales
4. Datos del programa
5. Pila
6. Heap
+------------+
|   Stack    |
+------------+
|     |      |
|     v      |   (Memoria alojada
|     ^      |    en tiempo de ejecución)
|     |      |
+------------+
|   Heap     |
+------------+
|   Datos    |
+------------+
|   Texto    |
+------------+

Dos instancias de un programa =>
Dos procesos en ejecución con la misma sección
de texto, todo lo demás es distinto.

**** Estado de un proceso
Los procesos compiten por recursos, i.e. no siempre están ejecutando su sección de texto.
***** En ejecución
***** Listo para ejecutarse
***** En espera
***** Nuevo (Recién creado)
***** Terminado
***** Gráfica
#+begin_src plantuml :file imagen1.png
(Nuevo)
(Listo para ejecutarse)
(En ejecución)
(En espera)
(Terminado)
(Nuevo) --> (Listo para ejecutarse) : Admitido
(Listo para ejecutarse) --> (En ejecución) : Escogido por calanderizador
(En ejecución) --> (Listo para ejecutarse) : Interrupción
(En ejecución) --> (En espera) : Llamada E/S o evento espera
(En ejecución) --> (Terminado) : exit()
(En espera) --> (Listo para ejecutarse) : Llamada I/O terminada
#+end_src

#+RESULTS:
[[file:imagen1.png]]

**** Process Control Block (PCB)

Estructura de datos que define a un proceso dentro del kernel.
- Identificador de procesos (PID)
- Estado de proceso
- Dirección inicial del proceso
- Información de memoria
- Proceso padre (Parent process)
- Usuario que lo mandó a llamar
- Tiempo vivo
- Información de los registros del CPU
- Información contable


Ya tenemos estructuras de datos que nos ayudan a controlar los procesos
tan solo con el estado.

#+begin_src plantuml :file imagen2.png
usecase UC1 as "Procesos en ejecución 
-- 
Cola de procesos en espera
--
Cola de procesoso listos"
#+end_src
#+RESULTS:
[[file:imagen2.png]]

- En ejecución
- Lista para ejecutarse
- En espera
- Nuevo (Recién creado)


#+begin_src plantuml :file imagen3.png
activate Proceso1
Proceso1 -> Proceso2: Llamada al sistema \n- Guarda PCB(1) \n- Cambia de estado
deactivate Proceso1
#+end_src

#+RESULTS:
[[file:imagen3.png]]
** Septima 
*** Calendarización 
    Existen tres tipos:
**** Corto plazo 
Realiza cambio de contexto, señala el proceso que ejecutará después.
No tarda más de 5~8 ms.
**** Mediano plazo
Realiza el cambio entre memoria y swap.
Puede o no estar presente.
**** Largo plazo (Multiprogramación)
Limita el número total de procesos ejecutandose en un sistema en cierto momento.

Administrador de procesos para optimizar el uso de recursos de cómputo.

*** Creación de procesos
(Al inicio sólo existía init...)

**** Proceso Padre
Un proceso actualmente en memoria que se esta ejecutando.
Sirve como modelo de memoria.
***** Es una plantilla para nuevos procesos.
***** Tiene procesos hijos
***** Árbol de jerarquía de Procesos
Hace uso de la llamada al sistema fork()


#+begin_src plantuml :file imagen4.png
(init)
(Proceso 1)
(Proceso 2)
(Proceso 3)
(init) -> (Proceso 1)
(init) -> (Proceso 2)
(init) -> (Proceso 3)
#+end_src

#+RESULTS:
[[file:imagen4.png]]
** Octava
** Novena
*** Comunicación interproceso
Surge de la dependencia de datos entre dos o mas procesos. Forma de manejar esta dependencia.
**** Memoria compartida
Más fácil de implementar. Declaras un pedazo de memoria en donde le pones banderas para que pueda 
ser leído y escrito por otros procesos. 
**** Paso de mensajes
***** Buzón de correo
     Si un proceso crea un buzón de correo, solo puede leer mensajes que lleguén a el. 
     Son archivos de escucha.
***** Tuberias (Caso especial de sockets, sockets de unix)
      Con pipe(int fd[]); se crea un archivo
     El proceso que lo llama solo puede escribir, al que se le pasa solo puede leer.
     Gracias a que llamamos fork() se compia el PCB junto con los descriptores de archivo.
***** Sockets
     El punto final entre la comunicación de procesos.
     Estructura de datos asociada a un archivo. (Administrado por el kernel)
     - Tupla = (direccion IP, puerto)
       puerto = int 65535 (8 bits)
       Si el puerto es menor a 1024 son puertos bien conocidos (Reservado por el kernel)
** Decima
*** Hilos
Unidad básica de uso de CPU.
Un hilo a diferencia de un proces no cuenta con espacio de texto, datos y descriptores de archivos.
Es más rápido crear un hilo que un proceso.
Necesita de hardware especial para su implementación.

**** Estructura
***** Contador de programa
***** Conjunto de registros
***** Pila
**** Razónes para crear hilos 
***** Mejor respuesta
***** Escabilidad
***** Administración de recursos
***** Creación rápida

**** Depende de la naturaleza del problema
***** Dependencia
****** Datos
****** Cómputo

**** Primer CPU con soporte hilos
***** Intel Core Duo
****** Pentium 4
****** 2 hilos de ejecución
****** Arquitectura x86

**** Definir
***** Trabajo a asignar por hilo
Bibliotecas. En Unix tenemos Pthreads. Se encarga de Administración
de los hilos o solo la creación de estos.
***** ¿Cómo manejar Interrupciones?
***** ¿Cuándo terminar la ejecución?
***** ¿Cómo regresar información procesada por cada hilo?
** Undecima
*** Ley de Amdahl (Pregunta de examén)
Describe la ganancia (en velocidad) para resolver un problema utilizando
varios núcleos de procesamiento.
1. Comparado con un sisteama de un solo núcleo de procesamiento
2. Sea S el porcentaje del programa que hace uso de varios núcleos, sea N el número de 
núcleos, la ganancia en velocidad (Speedup)

Speedup =< 1/(S+((1/S)/N)) 

*** Implementación de hilos
**** Espacio de usuario
Ventajas:
+ Son ligeros (fáciles de crear)
+ Rapidos (no hay cambio de contexto)
Deventajas:
- Se puede bloquear
**** Kernel
+ Creación de hilos es una llamada al sistema
+ Se pueden apartar recursos por hilo
+ Los hilos son una estructura de datos dentro del Kernel
- Puedo agotar los hilos del Kernel

Cuando un hilo de espacio de usuario ejecuta una llamada al sistema
un hilo de Kernel atiende dicha llamada al sistema.

**** Modelos ejecución de hilos
***** Uno a Uno
****** hilo esp. usuario
****** Magia
****** hilo de kernel
***** Muchos a Uno

    |  |   |   |  |
    \  |   |   |  /      -> Hilo espacio usuario
     \ |   |   | /
       ( Magia )
           |         -> Hilo kernel

***** Muchos a muchos

    |   |   |   |   |
    |   |   |   |   |  -> Usuario
    (     Magia     )
    |   |   |   |   |  -> Kernel
    |   |   |   |   |   

****** Políticas
 No. hilos de Kernel por Proceso
 Piscina de hilos (Thread pool)
 No. fijo hilos de kernel al iniciar el S.O.


***** Dos niveles
** Duodecima
*** Mutex
Es una forma de crear exclusión mutua. 
Es parte del Software.
Tiene dos funciones acquire() y release()

#+begin_src c 
available = true;
acquire(){
   while(!available)
      ; /* espera ocupada*/
   available = false;
}
release(){
   available = true;
}
#+end_src

*** Semaforors
Existen de dos tipos: binarios y contadores.
Es una forma de obtener exclusión mutua.
Es parte del Software.
Tiene dos funciones wait() y signal().
** Trigésima
*** Hilos (Modelo muchos a muchos)


 | | |  -> hilo usuario
(     ) -> magia
 | | |  -> hilo Kernel 

¿Cuántos hilos dde kernel por proceso hay que crear?
Especificar ese número al momento de crear el proceso.

**** Piscinas de hilos (ThreadPool)
Conjunto de hilos de kernel reservados para un proceso 
***** Dinámico
***** Estático

Ventajas
1. Peticiones se atienden más rápido
2. Se limita el número total de hilos de Kernel
3. La tarea de crear hilos es delegada al S.O. permitiendo
que se concentre en el trabajo a realizar.

Hay "1" piscina por proceso.

**** Señales
Evento que ocurre y le interesa a un proceso/hilo.
***** Sincronas
Enviadas al mismo proceso que genera la señal.
***** Asíncronas
Enviados a otro proceso.

Cíclo de vida.
1. Ocurre evento
2. Evento genera señal
3. Señal se entrega el proceso interesado.
4. Proceso interesado maneja dicha señal

Todas las señales posoen un manejadro por defecto
definido por el kernel.
1. Se maneja por defecto
2. Lo define el usuario

¿Qué hacer con la señal en un proceso multihilo?

1. Enviar la señal al mejor hilo candidato.
2. Entregar la señal a todos los hilos.
3. Entregar la señal a ciertos hilos.
4. Asignar un hilo específico para el manejo de señales.

La elección de política depende de la naturaleza de la señal.

#+begin_src c
kill (pid_t pid, int señal);
pthread_kill(pthread_d tid, int señal);
#+end_src

****  Cancelación de hilos.
Eliminar un hilo antes de que termine su ejecución.

-> El hilo a exterminar recibe el nombre "hilo objetivo" (target thread).

Un hilo puede ser exterminado de 2 formas.
***** Síncrona
Un hilo x(terminator) elimina al hilo objetivo.
***** Deferida
El hilo objetivo arregla su partida y termina de manera agradecida.

#+begin_src c
pthread_t hilo;
pthread_create(&hilo,0,NULL);
/* trabajo */
pthread_cancel(&hilo);
#+end_src
Por defecto es diferida.
La manera síncrona también es soportada.

#+begin_src c
pthread_testcancel();
#+end_src
Punto de cancelación pendiente.
Si hay punto de cancelación pendiente se ejecuta 
un manejador de limpieza encargado de liberar los recursos
asignados al hilo para después terminarse.

¿Cómo asignamos una variable local con alcance solo al hilo?

Thread Local Storage (TLS)

Sección de memoria única para cada hilo.
** Cuatrogésima(4/20/2017)
*** Comunicación entre bibliotecas de hilos y Kernel
- Para comunicar un hilo de usuario con un hilo 
de kernel se crea una estructura de datos
llamada "proceso de peso ligero" (Lightweigth process) (LWP)
- Para los hilos de usuario el LWP actúa como un procesador 
que se encarga de ejecutar dichos hilos.

|    |     |  <- Hilo de usuario
------------ 
(   LWP    )
------------
     |     
   ( k )    <- Hilo de kernel


- El LWP se asocia a un hilo de Kernel que 
ejecuta el código correspondiente en el CPU físico

- Kernel monitorea las acciones de los hilos de
 usuario en busca de bloqueos potenciales.

- El LWP actúa como un monitor que detecta bloqueos.

- El Kernel envía una señal al proceso de peso ligero 
para detectar al hilo que se bloqueará, aislándolo
del resto (upcall) 

- El manejador de dicha señal se llama upcallhandler

- El upcall handler tiene como objetivo asegurar que
los otros hilos continúen con su ejecución.


#+begin_src c
upcallHandler(pthread_t tid){
   // Solicita a kernel un nuevo LWP;
   // Selecciona los hilos cuyo indentificador hilo != tid;
   // Traslada esos hilos al nuevo LWP
   // Elige un hilo para su ejecución;
} 
#+end_src

- En UNIX los programas cargados en memoria se llama "tareas" (task)

- Los hilos (dentro de UNIX) son tareas.

- En UNIX la diferencia entre proceso e hilo es mínima.

- El Kernel de UNIX utiliza apuntadores dentro del PCB

- Proceso utiliza fork()

- Hilo utiliza clone(). Este es más flexible. 
